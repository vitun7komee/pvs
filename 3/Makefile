include configuration.mk

OBJCOPY=avr-objcopy
CC=avr-gcc

ifeq ($(findstring B, ${ON}), B)
	PORT_ON=PORTB
	DDR_ON=DDRB
else
	ifeq ($(findstring C, ${ON}), C)
		PORT_ON=PORTC
		DDR_ON=DDRC
	else
		PORT_ON=PORTD
		DDR_ON=DDRD
	endif
endif

ifeq ($(findstring B, ${REVERS}), B)
	PORTREVERS=PORTB
	DDRREVERS=DDRB
else
	ifeq ($(findstring C, ${REVERS}), C)
		PORTREVERS=PORTC
		DDRREVERS=DDRC
	else
		PORTREVERS=PORTD
		DDRREVERS=DDRD
	endif
endif

ifeq ($(findstring B, ${STEPPER_PA}), B)
	PORT_STEPPER_PA=PORTB
	DDR_STEPPER_PA=DDRB
else
	ifeq ($(findstring C, ${STEPPER_PA}), C)
		PORT_STEPPER_PA=PORTC
		DDR_STEPPER_PA=DDRC
	else
		PORT_STEPPER_PA=PORTD
		DDR_STEPPER_PA=DDRD
	endif
endif

ifeq ($(findstring B, ${STEPPER_PB}), B)
	PORT_STEPPER_PB=PORTB
	DDR_STEPPER_PB=DDRB
else
	ifeq ($(findstring C, ${STEPPER_PB}), C)
		PORT_STEPPER_PB=PORTC
		DDR_STEPPER_PB=DDRC
	else
		PORT_STEPPER_PB=PORTD
		DDR_STEPPER_PB=DDRD
	endif
endif

ifeq ($(findstring B, ${STEPPER_NA}), B)
	PORT_STEPPER_NA=PORTB
	DDR_STEPPER_NA=DDRB
else
	ifeq ($(findstring C, ${STEPPER_NA}), C)
		PORT_STEPPER_NA=PORTC
		DDR_STEPPER_NA=DDRC
	else
		PORT_STEPPER_NA=PORTD
		DDR_STEPPER_NA=DDRD
	endif
endif

ifeq ($(findstring B, ${STEPPER_NB}), B)
	PORT_STEPPER_NB=PORTB
	DDR_STEPPER_NB=DDRB
else
	ifeq ($(findstring C, ${STEPPER_NB}), C)
		PORT_STEPPER_NB=PORTC
		DDR_STEPPER_NB=DDRC
	else
		PORT_STEPPER_NB=PORTD
		DDR_STEPPER_NB=DDRD	
	endif
endif

ifeq ($(findstring B, ${LED_A}), B)
	PORT_LED_A=PORTB
	DDR_LED_A=DDRB
else
	ifeq ($(findstring C, ${LED_A}), C)
		PORT_LED_A=PORTC
		DDR_LED_A=DDRC
	else
		PORT_LED_A=PORTD
		DDR_LED_A=DDRD
	endif
endif

ifeq ($(findstring B, ${LED_B}), B)
	PORT_LED_B=PORTB
	DDR_LED_B=DDRB
else
	ifeq ($(findstring C, ${LED_B}), C)
		PORT_LED_B=PORTC
		DDR_LED_B=DDRC
	else
		PORT_LED_B=PORTD
		DDR_LED_B=DDRD
	endif
endif

ifeq ($(findstring B, ${LED_C}), B)
	PORT_LED_C=PORTB
	DDR_LED_C=DDRB
else
	ifeq ($(findstring C, ${LED_C}), C)
		PORT_LED_C=PORTC
		DDR_LED_C=DDRC
	else
		PORT_LED_C=PORTD
		DDR_LED_C=DDRD
	endif
endif

ifeq ($(findstring B, ${LED_D}), B)
	PORT_LED_D=PORTB
	DDR_LED_D=DDRB
else
	ifeq ($(findstring C, ${LED_D}), C)
		PORT_LED_D=PORTC
		DDR_LED_D=DDRC
	else
		PORT_LED_D=PORTD
		DDR_LED_D=DDRD
	endif
endif

ifeq ($(findstring B, ${LED_E}), B)
	PORT_LED_E=PORTB
	DDR_LED_E=DDRB
else
	ifeq ($(findstring C, ${LED_E}), C)
		PORT_LED_E=PORTC
		DDR_LED_E=DDRC
	else
		PORT_LED_E=PORTD
		DDR_LED_E=DDRD
	endif
endif

ifeq ($(findstring B, ${LED_F}), B)
	PORT_LED_F=PORTB
	DDR_LED_F=DDRB
else
	ifeq ($(findstring C, ${LED_F}), C)
		PORT_LED_F=PORTC
		DDR_LED_F=DDRC
	else
		PORT_LED_F=PORTD
		DDR_LED_F=DDRD
	endif
endif

ifeq ($(findstring B, ${LED_G}), B)
	PORT_LED_G=PORTB
	DDR_LED_G=DDRB
else
	ifeq ($(findstring C, ${LED_G}), C)
		PORT_LED_G=PORTC
		DDR_LED_G=DDRC
	else
		PORT_LED_G=PORTD
		DDR_LED_G=DDRD
	endif
endif



#-DKEY=P${KEY} -DPORTKEY=${PORTKEY} -DDDRKEY=${DDRKEY} -DPINKEY=${PINKEY}
#		-DTRANSMITTER_OUT=P${TRANSMITTER_OUT} -DPORT_TRANSMITTER_OUT=${PORT_TRANSMITTER_OUT} -DDDR_TRANSMITTER_OUT=${DDR_TRANSMITTER_OUT}
CFLAGS_main= -std=c99 -Wall -g -Os -mmcu=${MAIN_MCU} -DF_CPU=${F_CPU} \
		-DREVERS=P${REVERS} -DPORTREVERS=${PORTREVERS} -DDDRREVERS=${DDRREVERS}\
		-DON=P${ON} -DPORT_ON=${PORT_ON} -DDDR_ON=${DDR_ON}\
		-DSTEPPER_PA=P${STEPPER_PA} -DPORT_STEPPER_PA=${PORT_STEPPER_PA} -DDDR_STEPPER_PA=${DDR_STEPPER_PA}\
		-DSTEPPER_PB=P${STEPPER_PB} -DPORT_STEPPER_PB=${PORT_STEPPER_PB} -DDDR_STEPPER_PB=${DDR_STEPPER_PB}\
		-DSTEPPER_NA=P${STEPPER_NA} -DPORT_STEPPER_NA=${PORT_STEPPER_NA} -DDDR_STEPPER_NA=${DDR_STEPPER_NA}\
		-DSTEPPER_NB=P${STEPPER_NB} -DPORT_STEPPER_NB=${PORT_STEPPER_NB} -DDDR_STEPPER_NB=${DDR_STEPPER_NB}
		
TARGET_main=main_mcu
SRC_main=main_mcu.c


#		-DRECEIVER_IN=P${RECEIVER_IN} -DPORT_RECEIVER_IN=${PORT_RECEIVER_IN} -DDDR_RECEIVER_IN=${DDR_RECEIVER_IN} -DPIN_RECEIVER_IN=${PIN_RECEIVER_IN}
CFLAGS_second= -std=c99 -Wall -g -Os -mmcu=${SECOND_MCU} -DF_CPU=${F_CPU} \
		-DLED_A=P${LED_A} -DPORT_LED_A=${PORT_LED_A} -DDDR_LED_A=${DDR_LED_A}\
		-DLED_B=P${LED_B} -DPORT_LED_B=${PORT_LED_B} -DDDR_LED_B=${DDR_LED_B}\
		-DLED_C=P${LED_C} -DPORT_LED_C=${PORT_LED_C} -DDDR_LED_C=${DDR_LED_C}\
		-DLED_D=P${LED_D} -DPORT_LED_D=${PORT_LED_D} -DDDR_LED_D=${DDR_LED_D}\
		-DLED_E=P${LED_E} -DPORT_LED_E=${PORT_LED_E} -DDDR_LED_E=${DDR_LED_E}\
		-DLED_F=P${LED_F} -DPORT_LED_F=${PORT_LED_F} -DDDR_LED_F=${DDR_LED_F}\
		-DLED_G=P${LED_G} -DPORT_LED_G=${PORT_LED_G} -DDDR_LED_G=${DDR_LED_G}\
		
		
TARGET_second=second_mcu
SRC_second=second_mcu.c

all:
	${CC} ${CFLAGS_main} -o ${TARGET_main}.bin ${SRC_main}
	${OBJCOPY} -j .text -j .data -O ihex ${TARGET_main}.bin ${TARGET_main}.hex

	${CC} ${CFLAGS_second} -o ${TARGET_second}.bin ${SRC_second}
	${OBJCOPY} -j .text -j .data -O ihex ${TARGET_second}.bin ${TARGET_second}.hex


# include configuration.mk

# OBJCOPY=avr-objcopy
# CC=avr-gcc

# # Общие настройки для компиляции
# CFLAGS=-std=c99 -Wall -g -Os -mmcu=$(MCU) -DF_CPU=$(F_CPU)

# # Опции компиляции исходного файла для основного микроконтроллера
# CFLAGS_main=$(CFLAGS) \
# 	-DREVERS=$(REVERS) -DPORTREVERS=$(PORTREVERS) -DDDRREVERS=$(DDRREVERS) \
# 	-DON=$(ON) -DPORT_ON=$(PORT_ON) -DDDR_ON=$(DDR_ON) \
# 	-DSTEPPER_PA=$(STEPPER_PA) -DPORT_STEPPER_PA=$(PORT_STEPPER_PA) -DDDR_STEPPER_PA=$(DDR_STEPPER_PA) \
# 	-DSTEPPER_PB=$(STEPPER_PB) -DPORT_STEPPER_PB=$(PORT_STEPPER_PB) -DDDR_STEPPER_PB=$(DDR_STEPPER_PB) \
# 	-DSTEPPER_NA=$(STEPPER_NA) -DPORT_STEPPER_NA=$(PORT_STEPPER_NA) -DDDR_STEPPER_NA=$(DDR_STEPPER_NA) \
# 	-DSTEPPER_NB=$(STEPPER_NB) -DPORT_STEPPER_NB=$(PORT_STEPPER_NB) -DDDR_STEPPER_NB=$(DDR_STEPPER_NB)

# # Опции компиляции исходного файла для второго микроконтроллера
# CFLAGS_second=$(CFLAGS) \
# 	-DLED_A=$(LED_A) -DPORT_LED_A=$(PORT_LED_A) -DDDR_LED_A=$(DDR_LED_A) \
# 	-DLED_B=$(LED_B) -DPORT_LED_B=$(PORT_LED_B) -DDDR_LED_B=$(DDR_LED_B) \
# 	-DLED_C=$(LED_C) -DPORT_LED_C=$(PORT_LED_C) -DDDR_LED_C=$(DDR_LED_C) \
# 	-DLED_D=$(LED_D) -DPORT_LED_D=$(PORT_LED_D) -DDDR_LED_D=$(DDR_LED_D) \
# 	-DLED_E=$(LED_E) -DPORT_LED_E=$(PORT_LED_E) -DDDR_LED_E=$(DDR_LED_E) \
# 	-DLED_F=$(LED_F) -DPORT_LED_F=$(PORT_LED_F) -DDDR_LED_F=$(DDR_LED_F) \
# 	-DLED_G=$(LED_G) -DPORT_LED_G=$(PORT_LED_G) -DDDR_LED_G=$(DDR_LED_G)

# # Имя исполняемого файла для основного микроконтроллера
# TARGET_main=main_mcu

# # Имя исполняемого файла для второго микроконтроллера
# TARGET_second=second_mcu

# # Форматирование файлов для основного и второго микроконтроллеров
# $(TARGET_main).hex: $(TARGET_main).bin
# 	$(OBJCOPY) -j .text -j .data -O ihex $< $@

# $(TARGET_second).hex: $(TARGET_second).bin
# 	$(OBJCOPY) -j .text -j .data -O ihex $< $@

# # Сборка программы для основного и второго микроконтроллеров
# all: $(TARGET_main).hex $(TARGET_second).hex

# # Сборка объектного файла для основного микроконтроллера
# $(TARGET_main).bin: $(SRC_main)
# 	$(CC) $(CFLAGS_main) -o $@ $<

# # Сборка объектного файла для второго микроконтроллера
# $(TARGET_second).bin: $(SRC_second)
# 	$(CC) $(CFLAGS_second) -o $@ $<

# # Очистка всех временных файлов
# clean:
# 	rm -f $(TARGET_main).bin $(TARGET_main).hex $(TARGET_second).bin $(TARGET_second).hex

# .PHONY: all clean

